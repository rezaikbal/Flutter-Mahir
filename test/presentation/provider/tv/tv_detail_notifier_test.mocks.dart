// Mocks generated by Mockito 5.4.4 from annotations
// in movie_app/test/presentation/provider/tv/tv_detail_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_app/common/failure.dart' as _i7;
import 'package:movie_app/domain/entitites/movie/movie_detail.dart' as _i13;
import 'package:movie_app/domain/entitites/tv/tv.dart' as _i10;
import 'package:movie_app/domain/entitites/tv/tv_detail.dart' as _i8;
import 'package:movie_app/domain/repository/movie_repository.dart' as _i4;
import 'package:movie_app/domain/repository/tv_repository.dart' as _i2;
import 'package:movie_app/domain/usecase/movie/save_watchlist_usecase.dart'
    as _i12;
import 'package:movie_app/domain/usecase/tv/detail_tv_usecase.dart' as _i5;
import 'package:movie_app/domain/usecase/tv/recommended_tv_usecase.dart' as _i9;
import 'package:movie_app/domain/usecase/tv/remove_watchlist_tv_usecase.dart'
    as _i14;
import 'package:movie_app/domain/usecase/tv/watchlist_status_tv_usecae.dart'
    as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTvRepository_0 extends _i1.SmartFake implements _i2.TvRepository {
  _FakeTvRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMovieRepository_2 extends _i1.SmartFake
    implements _i4.MovieRepository {
  _FakeMovieRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DetailTvUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDetailTvUsecase extends _i1.Mock implements _i5.DetailTvUsecase {
  MockDetailTvUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get tvRepository => (super.noSuchMethod(
        Invocation.getter(#tvRepository),
        returnValue: _FakeTvRepository_0(
          this,
          Invocation.getter(#tvRepository),
        ),
      ) as _i2.TvRepository);

  @override
  set tvRepository(_i2.TvRepository? _tvRepository) => super.noSuchMethod(
        Invocation.setter(
          #tvRepository,
          _tvRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, _i8.TvDetail>> execute(int? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, _i8.TvDetail>>.value(
            _FakeEither_1<_i7.Failure, _i8.TvDetail>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, _i8.TvDetail>>);
}

/// A class which mocks [RecommendedTvUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecommendedTvUsecase extends _i1.Mock
    implements _i9.RecommendedTvUsecase {
  MockRecommendedTvUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get tvRepository => (super.noSuchMethod(
        Invocation.getter(#tvRepository),
        returnValue: _FakeTvRepository_0(
          this,
          Invocation.getter(#tvRepository),
        ),
      ) as _i2.TvRepository);

  @override
  set tvRepository(_i2.TvRepository? _tvRepository) => super.noSuchMethod(
        Invocation.setter(
          #tvRepository,
          _tvRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, List<_i10.Tv>>> execute(dynamic id) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, List<_i10.Tv>>>.value(
            _FakeEither_1<_i7.Failure, List<_i10.Tv>>(
          this,
          Invocation.method(
            #execute,
            [id],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, List<_i10.Tv>>>);
}

/// A class which mocks [WatchlistStatusTvUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockWatchlistStatusTvUsecase extends _i1.Mock
    implements _i11.WatchlistStatusTvUsecase {
  MockWatchlistStatusTvUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get tvRepository => (super.noSuchMethod(
        Invocation.getter(#tvRepository),
        returnValue: _FakeTvRepository_0(
          this,
          Invocation.getter(#tvRepository),
        ),
      ) as _i2.TvRepository);

  @override
  set tvRepository(_i2.TvRepository? _tvRepository) => super.noSuchMethod(
        Invocation.setter(
          #tvRepository,
          _tvRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> execute(int? id) => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [id],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);
}

/// A class which mocks [SaveWatchlistUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistUsecase extends _i1.Mock
    implements _i12.SaveWatchlistUsecase {
  MockSaveWatchlistUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get movieRepository => (super.noSuchMethod(
        Invocation.getter(#movieRepository),
        returnValue: _FakeMovieRepository_2(
          this,
          Invocation.getter(#movieRepository),
        ),
      ) as _i4.MovieRepository);

  @override
  set movieRepository(_i4.MovieRepository? _movieRepository) =>
      super.noSuchMethod(
        Invocation.setter(
          #movieRepository,
          _movieRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute(
          _i13.MovieDetail? movie) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [movie],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [movie],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
}

/// A class which mocks [RemoveWatchlistTvUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistTvUsecase extends _i1.Mock
    implements _i14.RemoveWatchlistTvUsecase {
  MockRemoveWatchlistTvUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TvRepository get tvRepository => (super.noSuchMethod(
        Invocation.getter(#tvRepository),
        returnValue: _FakeTvRepository_0(
          this,
          Invocation.getter(#tvRepository),
        ),
      ) as _i2.TvRepository);

  @override
  set tvRepository(_i2.TvRepository? _tvRepository) => super.noSuchMethod(
        Invocation.setter(
          #tvRepository,
          _tvRepository,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i3.Either<_i7.Failure, String>> execute(_i8.TvDetail? tvDetail) =>
      (super.noSuchMethod(
        Invocation.method(
          #execute,
          [tvDetail],
        ),
        returnValue: _i6.Future<_i3.Either<_i7.Failure, String>>.value(
            _FakeEither_1<_i7.Failure, String>(
          this,
          Invocation.method(
            #execute,
            [tvDetail],
          ),
        )),
      ) as _i6.Future<_i3.Either<_i7.Failure, String>>);
}
